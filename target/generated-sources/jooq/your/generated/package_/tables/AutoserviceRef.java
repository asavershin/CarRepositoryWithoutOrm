/*
 * This file is generated by jOOQ.
 */
package your.generated.package_.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import your.generated.package_.Keys;
import your.generated.package_.Public;
import your.generated.package_.tables.CarJn.CarJnPath;
import your.generated.package_.tables.records.AutoserviceRefRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AutoserviceRef extends TableImpl<AutoserviceRefRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.autoservice_ref</code>
     */
    public static final AutoserviceRef AUTOSERVICE_REF = new AutoserviceRef();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AutoserviceRefRecord> getRecordType() {
        return AutoserviceRefRecord.class;
    }

    /**
     * The column <code>public.autoservice_ref.id</code>.
     */
    public final TableField<AutoserviceRefRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.autoservice_ref.address</code>.
     */
    public final TableField<AutoserviceRefRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.autoservice_ref.country</code>.
     */
    public final TableField<AutoserviceRefRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.autoservice_ref.name</code>.
     */
    public final TableField<AutoserviceRefRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private AutoserviceRef(Name alias, Table<AutoserviceRefRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AutoserviceRef(Name alias, Table<AutoserviceRefRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.autoservice_ref</code> table reference
     */
    public AutoserviceRef(String alias) {
        this(DSL.name(alias), AUTOSERVICE_REF);
    }

    /**
     * Create an aliased <code>public.autoservice_ref</code> table reference
     */
    public AutoserviceRef(Name alias) {
        this(alias, AUTOSERVICE_REF);
    }

    /**
     * Create a <code>public.autoservice_ref</code> table reference
     */
    public AutoserviceRef() {
        this(DSL.name("autoservice_ref"), null);
    }

    public <O extends Record> AutoserviceRef(Table<O> path, ForeignKey<O, AutoserviceRefRecord> childPath, InverseForeignKey<O, AutoserviceRefRecord> parentPath) {
        super(path, childPath, parentPath, AUTOSERVICE_REF);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AutoserviceRefPath extends AutoserviceRef implements Path<AutoserviceRefRecord> {
        public <O extends Record> AutoserviceRefPath(Table<O> path, ForeignKey<O, AutoserviceRefRecord> childPath, InverseForeignKey<O, AutoserviceRefRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AutoserviceRefPath(Name alias, Table<AutoserviceRefRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AutoserviceRefPath as(String alias) {
            return new AutoserviceRefPath(DSL.name(alias), this);
        }

        @Override
        public AutoserviceRefPath as(Name alias) {
            return new AutoserviceRefPath(alias, this);
        }

        @Override
        public AutoserviceRefPath as(Table<?> alias) {
            return new AutoserviceRefPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AutoserviceRefRecord, Long> getIdentity() {
        return (Identity<AutoserviceRefRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AutoserviceRefRecord> getPrimaryKey() {
        return Keys.AUTOSERVICE_REF_PK;
    }

    private transient CarJnPath _carJn;

    /**
     * Get the implicit to-many join path to the <code>public.car_jn</code>
     * table
     */
    public CarJnPath carJn() {
        if (_carJn == null)
            _carJn = new CarJnPath(this, null, Keys.CAR_JN__FK_CAR_AUTOSERVICE.getInverseKey());

        return _carJn;
    }

    @Override
    public AutoserviceRef as(String alias) {
        return new AutoserviceRef(DSL.name(alias), this);
    }

    @Override
    public AutoserviceRef as(Name alias) {
        return new AutoserviceRef(alias, this);
    }

    @Override
    public AutoserviceRef as(Table<?> alias) {
        return new AutoserviceRef(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AutoserviceRef rename(String name) {
        return new AutoserviceRef(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AutoserviceRef rename(Name name) {
        return new AutoserviceRef(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AutoserviceRef rename(Table<?> name) {
        return new AutoserviceRef(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutoserviceRef where(Condition condition) {
        return new AutoserviceRef(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutoserviceRef where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutoserviceRef where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutoserviceRef where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutoserviceRef where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutoserviceRef where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutoserviceRef where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutoserviceRef where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutoserviceRef whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutoserviceRef whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
